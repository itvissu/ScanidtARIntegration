.. eager-ifconfig:: platform == 'cordova'

  :orphan:

.. _matrixscan-getting-started:

Get Started With MatrixScan
===========================

.. module:: scandit.datacapture.barcode.tracking
  :hidden:

With MatrixScan, you can highlight and interact multiple barcodes within the same frame and build AR experiences. MatrixScan use cases are implemented through functionality provided by Barcode Tracking.

In this guide you will learn step by step how to add Barcode Tracking to your application. Roughly, the steps are:

* Create a new :type:`data capture context<core.DataCaptureContext>`, initialized with your license key.
* Create a :type:`BarcodeTrackingSettings` instance where you enable the :type:`barcode symbologies<barcode.Symbology>` you want to read in your application.
* Create a new :type:`BarcodeTracking` object and initialize it with the settings created above.
* Obtain a :type:`camera<core.Camera>` instance and set it as the frame source on the data capture context.
* Create a new :type:`data capture view<core.ui.DataCaptureView>` and add a :type:`ui.BarcodeTrackingBasicOverlay` instance to it for visual feedback.
* Register a :type:`listener<ui.IBarcodeTrackingBasicOverlayListener>` and implement :meth:`BrushForTrackedBarcode()<ui.IBarcodeTrackingBasicOverlayListener.BrushForTrackedBarcode>` callback which is called whenever a new tracked barcode appears.

.. include:: /core/prerequisites.txt

.. include:: /core/create-context.txt

Configure the Barcode Tracking Mode
-----------------------------------

The main entry point for the Barcode Tracking Mode is the :type:`BarcodeTracking` object.
It is configured through :type:`BarcodeTrackingSettings` and allows to register one or more :type:`listeners<IBarcodeTrackingListener>` that will get informed whenever a new frame has been processed. 

Most of the times, you will not need to |implement| :type:`IBarcodeTrackingListener`, instead you will add a :type:`ui.BarcodeTrackingBasicOverlay` and |implement| :type:`ui.IBarcodeTrackingBasicOverlayListener`.

For this tutorial, we will setup Barcode Tracking for tracking QR codes.

.. sample:: swift

  let settings = BarcodeTrackingSettings()
  settings.set(symbology: .qr, enabled: true)

.. sample:: java

  BarcodeTrackingSettings settings = new BarcodeTrackingSettings();
  settings.enableSymbology(Symbology.QR, true);

Next, create a :type:`BarcodeTracking` instance with the data capture context and the settings initialized in the previous steps:

.. sample:: swift

  barcodeTracking = BarcodeTracking(context: context, settings: settings)

.. sample:: java

  BarcodeTracking barcodeTracking = BarcodeTracking.forDataCaptureContext(dataCaptureContext, settings);

.. include:: /core/use-builtin-camera-start.txt

When using the built-in camera there are recommended settings for each capture mode. These should be used to achieve the best performance and user experience for the respective mode. The following couple of lines show how to get the recommended settings and create the camera from it:

.. sample:: java

  CameraSettings cameraSettings = BarcodeTracking.createRecommendedCameraSettings();

  // Depending on the use case further camera settings adjustments can be made here.

  Camera camera = Camera.getDefaultCamera();
  if (camera != null) {
    camera.applySettings(cameraSettings, null);
  }

.. sample:: swift

  let cameraSettings = BarcodeCapture.recommendedCameraSettings

  // Depending on the use case further camera settings adjustments can be made here.

  let camera = Camera.default
  camera?.applySettings(cameraSettings)

.. include:: /core/use-builtin-camera-end.txt

.. include:: /core/display-scan-process.txt

To visualize the results of Barcode Tracking, first you need to add the following :type:`overlay<ui.BarcodeTrackingBasicOverlay>`:

.. sample:: swift

  let overlay = BarcodeTrackingBasicOverlay(barcodeTracking: barcodeTracking, view: captureView)

.. sample:: java

  BarcodeTrackingBasicOverlay overlay = BarcodeTrackingBasicOverlay.newInstance(barcodeTracking, dataCaptureView);

Once the overlay has been added, you should |implement| the :type:`ui.IBarcodeTrackingBasicOverlayListener` |interface|. The method :meth:`ui.IBarcodeTrackingBasicOverlayListener.BrushForTrackedBarcode` is invoked every time a new tracked barcode appears and it can be used to set a :type:`brush<core.ui.Brush>` that will be used to highlight that specific barcode in the :type:`overlay<ui.BarcodeTrackingBasicOverlay>`.

.. sample:: swift

  extension ViewController: BarcodeTrackingBasicOverlayDelegate {
      func barcodeTrackingBasicOverlay(_ overlay: BarcodeTrackingBasicOverlay,
                                  brushFor trackedBarcode: TrackedBarcode) -> Brush? {
          // Return a custom Brush based on the tracked barcode.
      }
  }

.. sample:: java

  @Override
  public void brushForTrackedBarcode(@NonNull BarcodeTrackingBasicOverlay overlay,
                                    @NonNull TrackedBarcode trackedBarcode) {
      // Return a custom Brush based on the tracked barcode.
  }

If you would like to make the highlights tappable, you need to implement the :meth:`ui.IBarcodeTrackingBasicOverlayListener.OnTrackedBarcodeTapped` method.

.. sample:: swift

  extension ViewController: BarcodeTrackingBasicOverlayDelegate {
      func barcodeTrackingBasicOverlay(_ overlay: BarcodeTrackingBasicOverlay,
                                  didTap trackedBarcode: TrackedBarcode) {
          // A tracked barcode was tapped.
      }
  }

.. sample:: java

  @Override
  public void onTap(@NonNull BarcodeTrackingBasicOverlay overlay,
                    @NonNull TrackedBarcode trackedBarcode) {
      // A tracked barcode was tapped.
  }

Get Barcode Tracking Feedback
-----------------------------

Barcode Tracking, unlike Barcode Capture, doesn't emit feedback (sound or vibration) when a new barcode is recognized. However, you may implement a :type:`IBarcodeTrackingListener` to provide a similar experience. Below, we use the default :type:`core.Feedback`, but you may configure it with your own sound or vibration if you want.

.. eager-ifconfig:: platform == 'android'

  First, let's create a :type:`feedback<core.Feedback>`. We release it after it is no longer used, to avoid resources being unnecessarily held.
  
.. eager-ifconfig:: platform == 'ios'

  First, let's create a :type:`feedback<core.Feedback>`.

.. sample:: java

    @Override
    protected void onResume() {
        super.onResume();

        feedback = Feedback.defaultFeedback()
    }

    @Override
    protected void onPause() {
        super.onPause();

        feedback.release();
    }

.. sample:: swift

    override func viewDidLoad() {
        super.viewDidLoad()
        feedback = Feedback.default
    }

Next, use this :type:`feedback<core.Feedback>` in a :type:`IBarcodeTrackingListener`:

.. sample:: java

    public class FeedbackListener implements BarcodeTrackingListener {
        @Override
        public void onObservationStarted(@NotNull BarcodeTracking barcodeTracking) {
            // Called when Barcode Tracking is started.
            // We don't use this callback in this guide.
        }

        @Override
        public void onObservationStopped(@NotNull BarcodeTracking barcodeTracking) {
            // Called when Barcode Tracking is stopped.
            // We don't use this callback in this guide.
        }

        @Override
        public void onSessionUpdated(
                @NotNull BarcodeTracking mode,
                @NotNull BarcodeTrackingSession session,
                @NotNull FrameData data
        ) {
            if (!session.getAddedTrackedBarcodes().isEmpty()) {
                feedback.emit();
            }
        }
    }

.. sample:: swift

    extension ScanningViewController: BarcodeTrackingListener {
        func barcodeTracking(_ barcodeTracking: BarcodeTracking,
                                 didUpdate session: BarcodeTrackingSession,
                                 frameData: FrameData) {
            if !session.addedTrackedBarcodes.isEmpty {
                feedback?.emit()
            }
        }
    }

:meth:`IBarcodeTrackingListener.OnSessionUpdated` is invoked for every processed frame. The :type:`session<BarcodeTrackingSession>` parameter contains information about the currently tracked barcodes, in particular, the newly recognized ones. We check if there are any and if so, we emit the feedback.

As the last step, register the |delegate| responsible for emitting the feedback with the :type:`BarcodeTracking` instance.

.. sample:: java

    barcodeTracking.addListener(feedbackListener);

.. sample:: swift

    barcodeTracking.addListener(self)

Limitations
-----------

Matrix scan does not support the following symbologies: 

* DotCode
* MaxiCode
* All postal codes (KIX, RM4SCC)


.. admonition:: What's next?

  To dive further into the |sdk| we recommend the following articles:

  * :doc:`configure-barcodes`
  * :doc:`add-augmented-reality-overlay`
