.. eager-ifconfig:: platform == 'cordova'

  :orphan:

Barcode Tracking Settings
=========================

.. module:: scandit.datacapture.barcode.tracking
  :android-package: com.scandit.datacapture.barcode.tracking.capture

.. class:: BarcodeTrackingSettings
  @objc@ SDCBarcodeTrackingSettings : NSObject <NSCopying>
  :available: ios=6.0, android=6.0

  .. method:: BarcodeTrackingSettings()
    @objc@ + (instancetype)settings
    :available: android=6.0, ios=6.0

    Creates a new barcode tracking settings instance. All symbologies are disabled. Make sure to enable the symbologies required by your app before applying the settings to :type:`BarcodeTracking` with :meth:`BarcodeTracking.ApplySettingsAsync`.

  .. method:: static BarcodeTrackingSettings FromJson(String jsonData)
    :available: android=6.0

    Constructs new barcode capture settings with the provided JSON serialization. See :doc:`/core/serialization` for details.
    
  .. method:: void UpdateFromJson(String jsonData)
    :available: android=6.0

    Updates the settings according to a JSON serialization. See :doc:`/core/serialization` for details.

  .. method:: barcode.SymbologySettings GetSymbologySettings(barcode.Symbology symbology)
    @objc@ - (nullable SDCSymbologySettings *)settingsForSymbology:(SDCSymbology)symbology
    :available: ios=6.0, android=6.0

    The returned :type:`barcode.SymbologySettings` object contains symbology-specific settings.
    
  .. property:: ISet<barcode.Symbology> EnabledSymbologies { get; }
    @objc@ @property (nonatomic, nonnull, readonly) NSSet<NSNumber *> *enabledSymbologies
    :available: ios=6.0, android=6.0

      Returns the set of enabled symbologies.

  .. method:: void EnableSymbologies(ISet<barcode.Symbology> symbologies)
    @objc@ - (void)enableSymbologies:(nonnull NSSet<NSNumber *> *)symbologies
    :available: ios=6.0, android=6.0

    This function provides a convenient shortcut to enabling decoding of particular symbologies without having to go through :type:`barcode.SymbologySettings`.
    By default, all symbologies are turned off and symbologies need to be explicitly enabled.

  .. method:: void EnableSymbology(barcode.Symbology symbology, bool enabled)
    @objc@ -(void)setSymbology:(SDCSymbology)symbology enabled:(BOOL)enabled
    :available: ios=6.0, android=6.0

    This function provides a convenient shortcut to enabling/disabling decoding of a particular symbology without having to go through :type:`barcode.SymbologySettings`.
    
    .. note::

      Some 1d barcode symbologies allow you to encode variable-length data. By default, the |sdk| only scans barcodes in a certain length range.

      If your application requires scanning of one of these symbologies, and the length is falling outside the default range, you may need to adjust the :prop:`active symbol counts<barcode.SymbologySettings.ActiveSymbolCounts>` for the symbology in addition to enabling it.
    
  .. method:: void SetProperty(string name, object value)
    @objc@ - (void)setValue:(id)value forProperty:(NSString *)property
    :available: ios=6.0, android=6.0

    Sets property to the provided value. Use this method to set properties that are not yet part of a stable API. Properties set through this method may or may not be used or change in a future release.

    .. implnote:: Values that can be converted to int (bools, ints, etc) should be set as "hidden properties" on the engine's barcode scanner settings. The values should be stored in a dictionary as well, so they can be retrieved again with :meth:`GetProperty`.

  .. method:: object GetProperty(string name)
    @objc@ - (nullable id)valueForProperty:(NSString *)property
    :available: ios=6.0, android=6.0

    Retrieves the value of a previously set property. In case the property does not exist, |null| is returned.

